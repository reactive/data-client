# Reactive Data Client

Yarn monorepo for normalized reactive state management.

## Architecture
- `packages/endpoint`: Base endpoints and declarative schemas
- `packages/rest`: REST modeling (`resource()`, `RestEndpoint`)
- `packages/core`: Framework-agnostic normalized store, Controller, Managers
- `packages/react`: React hooks (`useSuspense`, `useLive`, `useQuery`)
- `packages/vue`: Vue 3 composables
- `packages/normalizr`: Schema/Entity/normalization

## Development Workflows

- `yarn build` - Build all packages
- `yarn test` - Run tests (Jest projects: ReactDOM, Node, ReactNative)
- `yarn lint` / `yarn format` - Linting and formatting
- Website dev: use workspace task "website: start"

**Test naming**: `*.node.test.ts[x]` (Node), `*.native.test.ts[x]` (RN), `*.test.ts[x]` (regular)

## File Organization

- **API definitions**: `src/resources/` within examples/apps
- **Examples**: `examples/todo-app`, `examples/github-app`, `examples/nextjs`
- **Documentation**: `docs/core/api`, `docs/rest`, `docs/core/guides`
- **Tests**: `packages/*/src/**/__tests__`

## Key Principles

1. **Always define schemas** for normalization and caching
2. **Prefer normalized data** with proper Entity relationships
3. **Use `resource()` for CRUD operations** when mutations exist
4. **Use `RestEndpoint` for single endpoints** or when mutations aren't needed
5. **Define defaults for all Entity fields** to ensure type safety
6. **Use `actionTypes` from `@data-client/react`** for type-safe action handling
7. **Prefer smaller React components** that do one thing
8. **Use fixtures/interceptors for testing** instead of mocking

## Common Mistakes to Avoid

- Don't forget `fromJS()` or default property assignments for Entity fields
- Don't use `resource()` when mutation endpoints aren't needed
- Don't forget to set up `schema` on every resource/entity/collection
- Don't use raw fetch when Data Client hooks are available

## Integration Details

- **Babel**: Resolves relative `.js` imports to `.ts` in tests
- **Jest**: Maps `@data-client/*` imports to local `packages/*/src` during tests
- **TypeScript**: Uses TS 5.9 project references; ambient `.d.ts` files copied during build
- **Native compilation**: When `COMPILE_TARGET=native`, prefers `.native.*` files

When working on this codebase, always prioritize type safety, proper normalization, and leveraging the automatic caching provided by schema definitions. Follow the established patterns and refer to the official documentation for edge cases.

