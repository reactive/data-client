// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`denormalize [cached] denormalizes arrays with objects inside 1`] = `
[
  {
    "data": Tacos {
      "id": "1",
      "type": "foo",
    },
  },
  {
    "data": undefined,
  },
]
`;

exports[`denormalize [cached] denormalizes entities 1`] = `
[
  Tacos {
    "id": "1",
    "type": "foo",
  },
  Tacos {
    "id": "2",
    "type": "bar",
  },
]
`;

exports[`denormalize [cached] denormalizes ignoring deleted entities in arrays 1`] = `
[
  Tacos {
    "id": "1",
    "type": "foo",
  },
]
`;

exports[`denormalize [cached] denormalizes ignoring deleted entities in arrays 2`] = `
{
  "results": [
    Tacos {
      "id": "1",
      "type": "foo",
    },
  ],
}
`;

exports[`denormalize [cached] denormalizes ignoring unfound entities in arrays 1`] = `
[
  Tacos {
    "id": "1",
    "type": "foo",
  },
]
`;

exports[`denormalize [cached] denormalizes ignoring unfound entities in arrays 2`] = `
{
  "results": [
    Tacos {
      "id": "1",
      "type": "foo",
    },
  ],
}
`;

exports[`denormalize [cached] denormalizes nested entities 1`] = `
Article {
  "author": User {
    "id": "8472",
    "name": "Paul",
  },
  "body": "This article is great.",
  "comments": [
    Comment {
      "comment": "I like it!",
      "id": "comment-123-4738",
      "user": User {
        "id": "10293",
        "name": "Jane",
      },
    },
  ],
  "id": "123",
  "title": "A Great Article",
}
`;

exports[`denormalize [cached] denormalizes schema with extra members 1`] = `
{
  "data": [
    Tacos {
      "id": "1",
      "type": "foo",
    },
    Tacos {
      "id": "2",
      "type": "bar",
    },
  ],
  "extra": "5",
  "page": {
    "complex": {
      "complex": false,
      "next": true,
    },
    "first": null,
    "second": {
      "thing": "two",
    },
    "third": 1,
  },
}
`;

exports[`denormalize [cached] denormalizes schema with extra members but not set 1`] = `
{
  "data": [
    Tacos {
      "id": "1",
      "type": "foo",
    },
    Tacos {
      "id": "2",
      "type": "bar",
    },
  ],
}
`;

exports[`denormalize [cached] denormalizes where id is only in key 1`] = `
{
  "1": Tacos {
    "id": "",
    "type": "foo",
  },
  "2": Tacos {
    "id": "",
    "type": "bar",
  },
}
`;

exports[`denormalize [cached] denormalizes with function as pk() 1`] = `
[
  Patron {
    "guest": null,
    "id": "1",
    "name": "Esther",
  },
  Patron {
    "guest": Guest {
      "guestId": 1,
    },
    "id": "2",
    "name": "Tom",
  },
]
`;

exports[`denormalize [cached] denormalizes without entities fills undefined 1`] = `
{
  "data": undefined,
}
`;

exports[`denormalize [cached] denormalizes without entities fills undefined 2`] = `
Immutable.Map {
  "data": undefined,
}
`;

exports[`denormalize [cached] gracefully handles when nested entities are primitives 1`] = `[Function]`;

exports[`denormalize [cached] set to undefined if schema key is not in entities 1`] = `
Article {
  "author": undefined,
  "body": "",
  "comments": [
    Comment {
      "comment": "",
      "id": "1",
      "user": undefined,
    },
  ],
  "id": "123",
  "title": "",
}
`;

exports[`denormalize [fast] denormalizes arrays with objects inside 1`] = `
[
  {
    "data": Tacos {
      "id": "1",
      "type": "foo",
    },
  },
  {
    "data": undefined,
  },
]
`;

exports[`denormalize [fast] denormalizes entities 1`] = `
[
  Tacos {
    "id": "1",
    "type": "foo",
  },
  Tacos {
    "id": "2",
    "type": "bar",
  },
]
`;

exports[`denormalize [fast] denormalizes ignoring deleted entities in arrays 1`] = `
[
  Tacos {
    "id": "1",
    "type": "foo",
  },
]
`;

exports[`denormalize [fast] denormalizes ignoring deleted entities in arrays 2`] = `
{
  "results": [
    Tacos {
      "id": "1",
      "type": "foo",
    },
  ],
}
`;

exports[`denormalize [fast] denormalizes ignoring unfound entities in arrays 1`] = `
[
  Tacos {
    "id": "1",
    "type": "foo",
  },
]
`;

exports[`denormalize [fast] denormalizes ignoring unfound entities in arrays 2`] = `
{
  "results": [
    Tacos {
      "id": "1",
      "type": "foo",
    },
  ],
}
`;

exports[`denormalize [fast] denormalizes nested entities 1`] = `
Article {
  "author": User {
    "id": "8472",
    "name": "Paul",
  },
  "body": "This article is great.",
  "comments": [
    Comment {
      "comment": "I like it!",
      "id": "comment-123-4738",
      "user": User {
        "id": "10293",
        "name": "Jane",
      },
    },
  ],
  "id": "123",
  "title": "A Great Article",
}
`;

exports[`denormalize [fast] denormalizes schema with extra members 1`] = `
{
  "data": [
    Tacos {
      "id": "1",
      "type": "foo",
    },
    Tacos {
      "id": "2",
      "type": "bar",
    },
  ],
  "extra": "5",
  "page": {
    "complex": {
      "complex": false,
      "next": true,
    },
    "first": null,
    "second": {
      "thing": "two",
    },
    "third": 1,
  },
}
`;

exports[`denormalize [fast] denormalizes schema with extra members but not set 1`] = `
{
  "data": [
    Tacos {
      "id": "1",
      "type": "foo",
    },
    Tacos {
      "id": "2",
      "type": "bar",
    },
  ],
}
`;

exports[`denormalize [fast] denormalizes where id is only in key 1`] = `
{
  "1": Tacos {
    "id": "",
    "type": "foo",
  },
  "2": Tacos {
    "id": "",
    "type": "bar",
  },
}
`;

exports[`denormalize [fast] denormalizes with function as pk() 1`] = `
[
  Patron {
    "guest": null,
    "id": "1",
    "name": "Esther",
  },
  Patron {
    "guest": Guest {
      "guestId": 1,
    },
    "id": "2",
    "name": "Tom",
  },
]
`;

exports[`denormalize [fast] denormalizes without entities fills undefined 1`] = `
{
  "data": undefined,
}
`;

exports[`denormalize [fast] denormalizes without entities fills undefined 2`] = `
Immutable.Map {
  "data": undefined,
}
`;

exports[`denormalize [fast] gracefully handles when nested entities are primitives 1`] = `[Function]`;

exports[`denormalize [fast] set to undefined if schema key is not in entities 1`] = `
Article {
  "author": undefined,
  "body": "",
  "comments": [
    Comment {
      "comment": "",
      "id": "1",
      "user": undefined,
    },
  ],
  "id": "123",
  "title": "",
}
`;

exports[`normalize can use fully custom entity classes 1`] = `
{
  "entities": {
    "Children": {
      "4": {
        "id": 4,
        "name": "lettuce",
      },
    },
    "Food": {
      "1234": {
        "children": [
          "4",
        ],
        "name": "tacos",
        "uuid": "1234",
      },
    },
  },
  "entitiesMeta": {
    "Children": {
      "4": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "Food": {
      "1234": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": {
    "schema": "Food",
    "uuid": "1234",
  },
}
`;

exports[`normalize handles number ids when nesting 1`] = `
{
  "Article": {
    "123": {
      "author": "8472",
      "id": 123,
      "title": "A Great Article",
    },
  },
  "User": {
    "8472": {
      "id": 8472,
      "name": "Paul",
    },
  },
}
`;

exports[`normalize ignores null values 1`] = `
{
  "entities": {},
  "entitiesMeta": {},
  "indexes": {},
  "result": [
    null,
  ],
}
`;

exports[`normalize ignores null values 2`] = `
{
  "entities": {},
  "entitiesMeta": {},
  "indexes": {},
  "result": [
    undefined,
  ],
}
`;

exports[`normalize ignores null values 3`] = `
{
  "entities": {},
  "entitiesMeta": {},
  "indexes": {},
  "result": [
    false,
  ],
}
`;

exports[`normalize normalizes entities 1`] = `
{
  "entities": {
    "Tacos": {
      "1": {
        "id": "1",
        "type": "foo",
      },
      "2": {
        "id": "2",
        "type": "bar",
      },
    },
  },
  "entitiesMeta": {
    "Tacos": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "2": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": [
    "1",
    "2",
  ],
}
`;

exports[`normalize normalizes entities with circular references 1`] = `
{
  "entities": {
    "User": {
      "123": {
        "friends": [
          "123",
        ],
        "id": "123",
      },
    },
  },
  "entitiesMeta": {
    "User": {
      "123": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "123",
}
`;

exports[`normalize normalizes entities with circular references that fails validation 1`] = `"this always fails"`;

exports[`normalize normalizes nested entities 1`] = `
{
  "entities": {
    "Article": {
      "123": {
        "author": "8472",
        "body": "This article is great.",
        "comments": [
          "comment-123-4738",
        ],
        "id": "123",
        "title": "A Great Article",
      },
    },
    "Comment": {
      "comment-123-4738": {
        "comment": "I like it!",
        "id": "comment-123-4738",
        "user": "10293",
      },
    },
    "User": {
      "10293": {
        "id": "10293",
        "name": "Jane",
      },
      "8472": {
        "id": "8472",
        "name": "Paul",
      },
    },
  },
  "entitiesMeta": {
    "Article": {
      "123": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "Comment": {
      "comment-123-4738": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "User": {
      "10293": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "8472": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "123",
}
`;

exports[`normalize normalizes schema with extra members 1`] = `
{
  "entities": {
    "Tacos": {
      "1": {
        "id": "1",
        "type": "foo",
      },
      "2": {
        "id": "2",
        "type": "bar",
      },
    },
  },
  "entitiesMeta": {
    "Tacos": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "2": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": {
    "data": [
      "1",
      "2",
    ],
    "extra": "five",
    "page": {
      "complex": {
        "complex": false,
        "next": true,
      },
      "first": null,
      "second": {
        "thing": "two",
      },
      "third": 1,
    },
  },
}
`;

exports[`normalize normalizes schema with extra members but not set 1`] = `
{
  "entities": {
    "Tacos": {
      "1": {
        "id": "1",
        "type": "foo",
      },
      "2": {
        "id": "2",
        "type": "bar",
      },
    },
  },
  "entitiesMeta": {
    "Tacos": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "2": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": {
    "data": [
      "1",
      "2",
    ],
  },
}
`;

exports[`normalize normalizes schema with indexes 1`] = `
{
  "entities": {
    "MyTaco": {
      "1": {
        "id": "1",
        "type": "foo",
      },
      "2": {
        "id": "2",
        "type": "bar2",
      },
    },
  },
  "entitiesMeta": {
    "MyTaco": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "2": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {
    "MyTaco": {
      "type": {
        "bar": Symbol(INVALID),
        "bar2": "2",
        "foo": "1",
      },
    },
  },
  "result": {
    "alt": "2",
    "data": [
      "1",
      "2",
    ],
  },
}
`;

exports[`normalize normalizes warns on schemas with unfound indexes 1`] = `
{
  "entities": {
    "MyTaco": {
      "1": {
        "id": "1",
        "type": "foo",
      },
      "2": {
        "id": "2",
        "type": "bar2",
      },
    },
  },
  "entitiesMeta": {
    "MyTaco": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "2": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {
    "MyTaco": {
      "notfound": {},
    },
  },
  "result": {
    "alt": "2",
    "data": [
      "1",
      "2",
    ],
  },
}
`;

exports[`normalize passes over pre-normalized values 1`] = `
{
  "entities": {
    "Article": {
      "123": {
        "author": "1",
        "id": "123",
        "title": "normalizr is great!",
      },
    },
  },
  "entitiesMeta": {
    "Article": {
      "123": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "123",
}
`;

exports[`normalize passes over pre-normalized values 2`] = `
{
  "entities": {},
  "entitiesMeta": {},
  "indexes": {},
  "result": {
    "user": "1",
  },
}
`;

exports[`normalize uses the non-normalized input when getting the ID for an entity 1`] = `
{
  "entities": {
    "Recommendations": {
      "456": {
        "user": "456",
      },
    },
    "User": {
      "456": {
        "id": "456",
      },
    },
  },
  "entitiesMeta": {
    "Recommendations": {
      "456": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "User": {
      "456": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "456",
}
`;

exports[`normalize uses the non-normalized input when getting the ID for an entity 2`] = `
[
  [
    {
      "user": "456",
    },
    {
      "user": {
        "id": "456",
      },
    },
    undefined,
  ],
]
`;
