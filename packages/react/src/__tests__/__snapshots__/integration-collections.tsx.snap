// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`CacheProvider RestEndpoint/current endpoint.assign should add to schema.Values Collections 1`] = `
Article {
  "author": null,
  "content": "blah",
  "id": 1,
  "tags": [],
  "title": "newly assigned",
}
`;

exports[`CacheProvider RestEndpoint/current pagination should work with cursor field parameters 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/current should update collection on push/unshift FormData 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "user": User {
    "email": "",
    "id": "1",
    "name": "",
    "todos": [
      Todo {
        "completed": false,
        "id": "5",
        "title": "do things",
        "userId": "1",
      },
    ],
    "username": "bob",
  },
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/current should update collection on push/unshift pojo 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "user": User {
    "email": "",
    "id": "1",
    "name": "",
    "todos": [
      Todo {
        "completed": false,
        "id": "5",
        "title": "do things",
        "userId": "1",
      },
    ],
    "username": "bob",
  },
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/current should update on get for a paginated resource 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/current should update on get for a paginated resource with searchParams 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/current should update on get for nested args change 1`] = `
[
  Offer {
    "id": "5",
    "text": "hi",
  },
  Offer {
    "id": "2",
    "text": "next",
  },
]
`;

exports[`CacheProvider RestEndpoint/current should update on get for nested args change 2`] = `
[
  Offer {
    "id": "10",
    "text": "second",
  },
  Offer {
    "id": "11",
    "text": "page",
  },
]
`;

exports[`CacheProvider RestEndpoint/next endpoint.assign should add to schema.Values Collections 1`] = `
Article {
  "author": null,
  "content": "blah",
  "id": 1,
  "tags": [],
  "title": "newly assigned",
}
`;

exports[`CacheProvider RestEndpoint/next pagination should work with cursor field parameters 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/next should update collection on push/unshift FormData 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "user": User {
    "email": "",
    "id": "1",
    "name": "",
    "todos": [
      Todo {
        "completed": false,
        "id": "5",
        "title": "do things",
        "userId": "1",
      },
    ],
    "username": "bob",
  },
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/next should update collection on push/unshift pojo 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "user": User {
    "email": "",
    "id": "1",
    "name": "",
    "todos": [
      Todo {
        "completed": false,
        "id": "5",
        "title": "do things",
        "userId": "1",
      },
    ],
    "username": "bob",
  },
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/next should update on get for a paginated resource 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/next should update on get for a paginated resource with searchParams 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`CacheProvider RestEndpoint/next should update on get for nested args change 1`] = `
[
  Offer {
    "id": "5",
    "text": "hi",
  },
  Offer {
    "id": "2",
    "text": "next",
  },
]
`;

exports[`CacheProvider RestEndpoint/next should update on get for nested args change 2`] = `
[
  Offer {
    "id": "10",
    "text": "second",
  },
  Offer {
    "id": "11",
    "text": "page",
  },
]
`;

exports[`CacheProvider pagination should ignore undefined values 1`] = `
[
  Article {
    "author": User {
      "email": "bob@bob.com",
      "id": 23,
      "isAdmin": false,
      "username": "charles",
    },
    "content": "whatever",
    "id": 5,
    "tags": [
      "a",
      "best",
      "react",
    ],
    "title": "hi ho",
  },
  Article {
    "author": User {
      "email": "bob@bob.com",
      "id": 23,
      "isAdmin": false,
      "username": "charles",
    },
    "content": "whatever",
    "id": 3,
    "tags": [],
    "title": "the next time",
  },
]
`;

exports[`CacheProvider pagination should work with cursor field from getList.paginated 1`] = `
[
  Article {
    "author": User {
      "email": "bob@bob.com",
      "id": 23,
      "isAdmin": false,
      "username": "charles",
    },
    "content": "whatever",
    "id": 5,
    "tags": [
      "a",
      "best",
      "react",
    ],
    "title": "hi ho",
  },
  Article {
    "author": User {
      "email": "bob@bob.com",
      "id": 23,
      "isAdmin": false,
      "username": "charles",
    },
    "content": "whatever",
    "id": 3,
    "tags": [],
    "title": "the next time",
  },
]
`;

exports[`CacheProvider should use custom Collection class 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`CacheProvider should work with unions 1`] = `
[
  [
    "Schema attribute "another" is not expected.
Expected one of: "first", "second"

Value: {
  "id": "6",
  "body": "hi",
  "type": "another"
}",
  ],
  [
    "Schema attribute undefined is not expected.
Expected one of: "first", "second"

Value: {
  "id": "7",
  "body": "hi"
}",
  ],
  [
    "TypeError: Unable to infer schema for ArraySchema
Value: {
  "id": "6",
  "body": "hi",
  "type": "another"
}.",
  ],
  [
    "TypeError: Unable to infer schema for ArraySchema
Value: {
  "id": "7",
  "body": "hi"
}.",
  ],
]
`;

exports[`CacheProvider should work with unions 2`] = `
[
  null,
  FirstUnion {
    "body": "hi",
    "firstOnlyField": 5,
    "id": "5",
    "type": "first",
  },
  {
    "body": "hi",
    "id": "6",
    "type": "another",
  },
  {
    "body": "hi",
    "id": "7",
  },
  SecondUnion {
    "body": "hi",
    "id": "100",
    "secondeOnlyField": 10,
    "type": "second",
  },
]
`;

exports[`ExternalDataProvider RestEndpoint/current endpoint.assign should add to schema.Values Collections 1`] = `
Article {
  "author": null,
  "content": "blah",
  "id": 1,
  "tags": [],
  "title": "newly assigned",
}
`;

exports[`ExternalDataProvider RestEndpoint/current pagination should work with cursor field parameters 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/current should update collection on push/unshift FormData 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "user": User {
    "email": "",
    "id": "1",
    "name": "",
    "todos": [
      Todo {
        "completed": false,
        "id": "5",
        "title": "do things",
        "userId": "1",
      },
    ],
    "username": "bob",
  },
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/current should update collection on push/unshift pojo 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "user": User {
    "email": "",
    "id": "1",
    "name": "",
    "todos": [
      Todo {
        "completed": false,
        "id": "5",
        "title": "do things",
        "userId": "1",
      },
    ],
    "username": "bob",
  },
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/current should update on get for a paginated resource 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/current should update on get for a paginated resource with searchParams 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/current should update on get for nested args change 1`] = `
[
  Offer {
    "id": "5",
    "text": "hi",
  },
  Offer {
    "id": "2",
    "text": "next",
  },
]
`;

exports[`ExternalDataProvider RestEndpoint/current should update on get for nested args change 2`] = `
[
  Offer {
    "id": "10",
    "text": "second",
  },
  Offer {
    "id": "11",
    "text": "page",
  },
]
`;

exports[`ExternalDataProvider RestEndpoint/next endpoint.assign should add to schema.Values Collections 1`] = `
Article {
  "author": null,
  "content": "blah",
  "id": 1,
  "tags": [],
  "title": "newly assigned",
}
`;

exports[`ExternalDataProvider RestEndpoint/next pagination should work with cursor field parameters 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/next should update collection on push/unshift FormData 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "user": User {
    "email": "",
    "id": "1",
    "name": "",
    "todos": [
      Todo {
        "completed": false,
        "id": "5",
        "title": "do things",
        "userId": "1",
      },
    ],
    "username": "bob",
  },
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/next should update collection on push/unshift pojo 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "user": User {
    "email": "",
    "id": "1",
    "name": "",
    "todos": [
      Todo {
        "completed": false,
        "id": "5",
        "title": "do things",
        "userId": "1",
      },
    ],
    "username": "bob",
  },
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/next should update on get for a paginated resource 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/next should update on get for a paginated resource with searchParams 1`] = `
{
  "nextPage": 2,
  "results": [
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 5,
      "tags": [
        "a",
        "best",
        "react",
      ],
      "title": "hi ho",
    },
    Article {
      "author": User {
        "email": "bob@bob.com",
        "id": 23,
        "isAdmin": false,
        "username": "charles",
      },
      "content": "whatever",
      "id": 3,
      "tags": [],
      "title": "the next time",
    },
  ],
}
`;

exports[`ExternalDataProvider RestEndpoint/next should update on get for nested args change 1`] = `
[
  Offer {
    "id": "5",
    "text": "hi",
  },
  Offer {
    "id": "2",
    "text": "next",
  },
]
`;

exports[`ExternalDataProvider RestEndpoint/next should update on get for nested args change 2`] = `
[
  Offer {
    "id": "10",
    "text": "second",
  },
  Offer {
    "id": "11",
    "text": "page",
  },
]
`;

exports[`ExternalDataProvider pagination should ignore undefined values 1`] = `
[
  Article {
    "author": User {
      "email": "bob@bob.com",
      "id": 23,
      "isAdmin": false,
      "username": "charles",
    },
    "content": "whatever",
    "id": 5,
    "tags": [
      "a",
      "best",
      "react",
    ],
    "title": "hi ho",
  },
  Article {
    "author": User {
      "email": "bob@bob.com",
      "id": 23,
      "isAdmin": false,
      "username": "charles",
    },
    "content": "whatever",
    "id": 3,
    "tags": [],
    "title": "the next time",
  },
]
`;

exports[`ExternalDataProvider pagination should work with cursor field from getList.paginated 1`] = `
[
  Article {
    "author": User {
      "email": "bob@bob.com",
      "id": 23,
      "isAdmin": false,
      "username": "charles",
    },
    "content": "whatever",
    "id": 5,
    "tags": [
      "a",
      "best",
      "react",
    ],
    "title": "hi ho",
  },
  Article {
    "author": User {
      "email": "bob@bob.com",
      "id": 23,
      "isAdmin": false,
      "username": "charles",
    },
    "content": "whatever",
    "id": 3,
    "tags": [],
    "title": "the next time",
  },
]
`;

exports[`ExternalDataProvider should use custom Collection class 1`] = `
{
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
    Todo {
      "completed": false,
      "id": "3",
      "title": "ssdf",
      "userId": "2",
    },
  ],
  "userTodos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "do things",
      "userId": "1",
    },
  ],
}
`;

exports[`ExternalDataProvider should work with unions 1`] = `
[
  [
    "Schema attribute "another" is not expected.
Expected one of: "first", "second"

Value: {
  "id": "6",
  "body": "hi",
  "type": "another"
}",
  ],
  [
    "Schema attribute undefined is not expected.
Expected one of: "first", "second"

Value: {
  "id": "7",
  "body": "hi"
}",
  ],
  [
    "TypeError: Unable to infer schema for ArraySchema
Value: {
  "id": "6",
  "body": "hi",
  "type": "another"
}.",
  ],
  [
    "TypeError: Unable to infer schema for ArraySchema
Value: {
  "id": "7",
  "body": "hi"
}.",
  ],
]
`;

exports[`ExternalDataProvider should work with unions 2`] = `
[
  null,
  FirstUnion {
    "body": "hi",
    "firstOnlyField": 5,
    "id": "5",
    "type": "first",
  },
  {
    "body": "hi",
    "id": "6",
    "type": "another",
  },
  {
    "body": "hi",
    "id": "7",
  },
  SecondUnion {
    "body": "hi",
    "id": "100",
    "secondeOnlyField": 10,
    "type": "second",
  },
]
`;
