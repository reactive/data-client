// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Invalidate denormalization input (direct) schema construction (class) denormalize removes deleted entries in array 1`] = `[]`;

exports[`Invalidate denormalization input (direct) schema construction (class) denormalize removes deleted entries in array 2`] = `[]`;

exports[`Invalidate denormalization input (direct) schema construction (class) denormalize sets undefined entities that are not present 1`] = `
[
  {
    "data": undefined,
  },
]
`;

exports[`Invalidate denormalization input (direct) schema construction (class) denormalize sets undefined entities that are not present 2`] = `
[
  {
    "data": undefined,
  },
]
`;

exports[`Invalidate denormalization input (direct) schema construction (class) denormalize sets undefined entities that are not present 3`] = `
{
  "data": undefined,
}
`;

exports[`Invalidate denormalization input (direct) schema construction (object, direct) denormalize removes deleted entries in array 1`] = `[]`;

exports[`Invalidate denormalization input (direct) schema construction (object, direct) denormalize removes deleted entries in array 2`] = `[]`;

exports[`Invalidate denormalization input (direct) schema construction (object, direct) denormalize sets undefined entities that are not present 1`] = `
[
  {
    "data": undefined,
  },
]
`;

exports[`Invalidate denormalization input (direct) schema construction (object, direct) denormalize sets undefined entities that are not present 2`] = `
[
  {
    "data": undefined,
  },
]
`;

exports[`Invalidate denormalization input (direct) schema construction (object, direct) denormalize sets undefined entities that are not present 3`] = `
{
  "data": undefined,
}
`;

exports[`Invalidate denormalization input (immutable) schema construction (class) denormalize removes deleted entries in array 1`] = `Immutable.List []`;

exports[`Invalidate denormalization input (immutable) schema construction (class) denormalize removes deleted entries in array 2`] = `Immutable.List []`;

exports[`Invalidate denormalization input (immutable) schema construction (class) denormalize sets undefined entities that are not present 1`] = `
Immutable.List [
  Immutable.Map {
    "data": undefined,
  },
]
`;

exports[`Invalidate denormalization input (immutable) schema construction (class) denormalize sets undefined entities that are not present 2`] = `
Immutable.List [
  Immutable.Map {
    "data": undefined,
  },
]
`;

exports[`Invalidate denormalization input (immutable) schema construction (class) denormalize sets undefined entities that are not present 3`] = `
Immutable.Map {
  "data": undefined,
}
`;

exports[`Invalidate denormalization input (immutable) schema construction (object, direct) denormalize removes deleted entries in array 1`] = `Immutable.List []`;

exports[`Invalidate denormalization input (immutable) schema construction (object, direct) denormalize removes deleted entries in array 2`] = `Immutable.List []`;

exports[`Invalidate denormalization input (immutable) schema construction (object, direct) denormalize sets undefined entities that are not present 1`] = `
Immutable.List [
  Immutable.Map {
    "data": undefined,
  },
]
`;

exports[`Invalidate denormalization input (immutable) schema construction (object, direct) denormalize sets undefined entities that are not present 2`] = `
Immutable.List [
  Immutable.Map {
    "data": undefined,
  },
]
`;

exports[`Invalidate denormalization input (immutable) schema construction (object, direct) denormalize sets undefined entities that are not present 3`] = `
Immutable.Map {
  "data": undefined,
}
`;

exports[`Invalidate normalization normalizes already processed entities 1`] = `
{
  "entities": {},
  "entitiesMeta": {},
  "indexes": {},
  "result": "1",
}
`;

exports[`Invalidate normalization normalizes already processed entities 2`] = `
{
  "entities": {},
  "entitiesMeta": {},
  "indexes": {},
  "result": [
    "1",
    "2",
  ],
}
`;

exports[`Invalidate normalization normalizes an object 1`] = `
{
  "entities": {
    "User": {
      "1": Symbol(INVALID),
    },
  },
  "entitiesMeta": {
    "User": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "1",
}
`;

exports[`Invalidate normalization should throw a custom error if data does not include pk (serializes pk) 1`] = `
"Missing usable primary key when normalizing response.

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://dataclient.io/docs/getting-started/debugging
  Learn more about schemas: https://dataclient.io/docs/api/schema

  Invalidate(Entity): Invalidate(MyEntity)
  Value (processed): {
  "secondthing": "hi"
}
  "
`;

exports[`Invalidate normalization should throw a custom error if data does not include pk 1`] = `
"Missing usable primary key when normalizing response.

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://dataclient.io/docs/getting-started/debugging
  Learn more about schemas: https://dataclient.io/docs/api/schema

  Invalidate(Entity): Invalidate(MyEntity)
  Value (processed): {
  "secondthing": "hi"
}
  "
`;
