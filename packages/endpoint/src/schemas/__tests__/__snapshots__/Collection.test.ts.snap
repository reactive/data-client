// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`CollectionSchema denormalization denormalizes nested collections 1`] = `
User {
  "email": "",
  "id": "1",
  "name": "",
  "todos": [
    Todo {
      "completed": false,
      "id": "5",
      "title": "finish collections",
      "userId": 0,
    },
  ],
  "username": "bob",
}
`;

exports[`CollectionSchema denormalization denormalizes top level collections 1`] = `
[
  Todo {
    "completed": false,
    "id": "5",
    "title": "finish collections",
    "userId": 0,
  },
]
`;

exports[`CollectionSchema normalization normalizes already processed entities 1`] = `
{
  "entities": {
    "User": {
      "1": {
        "id": "1",
        "todos": "{"userId":"1"}",
        "username": "bob",
      },
    },
    "[Todo]": {
      "{"userId":"1"}": [
        "5",
        "6",
      ],
    },
  },
  "entitiesMeta": {
    "User": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "[Todo]": {
      "{"userId":"1"}": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "1",
}
`;

exports[`CollectionSchema normalization normalizes nested collections 1`] = `
{
  "entities": {
    "Todo": {
      "5": {
        "id": "5",
        "title": "finish collections",
      },
    },
    "User": {
      "1": {
        "id": "1",
        "todos": "{"userId":"1"}",
        "username": "bob",
      },
    },
    "[Todo]": {
      "{"userId":"1"}": [
        "5",
      ],
    },
  },
  "entitiesMeta": {
    "Todo": {
      "5": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "User": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "[Todo]": {
      "{"userId":"1"}": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "1",
}
`;

exports[`CollectionSchema normalization normalizes push onto the end 1`] = `
{
  "entities": {
    "Todo": {
      "10": {
        "id": "10",
        "title": "create new items",
      },
      "5": {
        "id": "5",
        "title": "finish collections",
      },
    },
    "User": {
      "1": {
        "id": "1",
        "todos": "{"userId":"1"}",
        "username": "bob",
      },
    },
    "[Todo]": {
      "{"userId":"1"}": [
        "5",
        "10",
      ],
    },
  },
  "entitiesMeta": {
    "Todo": {
      "10": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "5": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "User": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "[Todo]": {
      "{"userId":"1"}": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": [
    "10",
  ],
}
`;

exports[`CollectionSchema normalization normalizes remove from collection 1`] = `
{
  "entities": {
    "Todo": {
      "5": {
        "id": "5",
        "title": "finish collections",
      },
      "6": {
        "id": "6",
        "title": "another todo",
      },
    },
    "User": {
      "1": {
        "id": "1",
        "todos": "{"userId":"1"}",
        "username": "bob",
      },
    },
    "[Todo]": {
      "{"userId":"1"}": [
        "6",
      ],
    },
  },
  "entitiesMeta": {
    "Todo": {
      "5": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "6": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "User": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "[Todo]": {
      "{"userId":"1"}": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": [
    "5",
  ],
}
`;

exports[`CollectionSchema normalization normalizes remove from collection with multiple items 1`] = `
{
  "entities": {
    "Todo": {
      "5": {
        "id": "5",
        "title": "finish collections",
      },
      "6": {
        "id": "6",
        "title": "another todo",
      },
      "7": {
        "id": "7",
        "title": "third todo",
      },
    },
    "User": {
      "1": {
        "id": "1",
        "todos": "{"userId":"1"}",
        "username": "bob",
      },
    },
    "[Todo]": {
      "{"userId":"1"}": [
        "5",
        "7",
      ],
    },
  },
  "entitiesMeta": {
    "Todo": {
      "5": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "6": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "7": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "User": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "[Todo]": {
      "{"userId":"1"}": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": [
    "6",
  ],
}
`;

exports[`CollectionSchema normalization normalizes remove non-existent item from collection 1`] = `
{
  "entities": {
    "Todo": {
      "5": {
        "id": "5",
        "title": "finish collections",
      },
      "99": {
        "id": "99",
        "title": "non-existent todo",
      },
    },
    "User": {
      "1": {
        "id": "1",
        "todos": "{"userId":"1"}",
        "username": "bob",
      },
    },
    "[Todo]": {
      "{"userId":"1"}": [
        "5",
      ],
    },
  },
  "entitiesMeta": {
    "Todo": {
      "5": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "99": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "User": {
      "1": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "[Todo]": {
      "{"userId":"1"}": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": [
    "99",
  ],
}
`;

exports[`CollectionSchema normalization normalizes top level collections (no args) 1`] = `
{
  "entities": {
    "Todo": {
      "5": {
        "id": "5",
        "title": "finish collections",
      },
    },
    "[Todo]": {
      "{"userId":"1"}": [
        "5",
      ],
    },
  },
  "entitiesMeta": {
    "Todo": {
      "5": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "[Todo]": {
      "{"userId":"1"}": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "{"userId":"1"}",
}
`;

exports[`CollectionSchema normalization normalizes top level collections 1`] = `
{
  "entities": {
    "Todo": {
      "5": {
        "id": "5",
        "title": "finish collections",
      },
    },
    "[Todo]": {
      "{"userId":"1"}": [
        "5",
      ],
    },
  },
  "entitiesMeta": {
    "Todo": {
      "5": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "[Todo]": {
      "{"userId":"1"}": {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": {},
  "result": "{"userId":"1"}",
}
`;

exports[`CollectionSchema normalization polymorphism works with Union members 1`] = `"{"fakeFilter":"false"}"`;

exports[`CollectionSchema normalization polymorphism works with Union members 2`] = `
{
  "Group": {
    "2": {
      "id": "2",
      "type": "groups",
    },
  },
  "User": {
    "1": {
      "id": "1",
      "type": "users",
    },
  },
  "[User;Group]": {
    "{"fakeFilter":"false"}": [
      {
        "id": "1",
        "schema": "users",
      },
      {
        "id": "2",
        "schema": "groups",
      },
    ],
  },
}
`;

exports[`CollectionSchema normalization polymorphism works with polymorphic members 1`] = `"{"fakeFilter":"false"}"`;

exports[`CollectionSchema normalization polymorphism works with polymorphic members 2`] = `
{
  "Group": {
    "2": {
      "id": "2",
      "type": "groups",
    },
  },
  "User": {
    "1": {
      "id": "1",
      "type": "users",
    },
  },
  "[User;Group]": {
    "{"fakeFilter":"false"}": [
      {
        "id": "1",
        "schema": "users",
      },
      {
        "id": "2",
        "schema": "groups",
      },
    ],
  },
}
`;

exports[`CollectionSchema normalization should throw a custom error if data loads with args of unexpected value 1`] = `"Cannot destructure property 'userId' of 'undefined' as it is undefined."`;

exports[`CollectionSchema normalization should throw a custom error if data loads with string unexpected value 1`] = `
"Unexpected input given to normalize. Expected type to be "object", found "string".

          Schema: {
  "key": "[Todo]",
  "schema": {
    "key": "Todo",
    "schema": {}
  }
}
          Input: "abc""
`;

exports[`CollectionSchema normalization should throw a custom error if data loads with string unexpected value 2`] = `
"Unexpected input given to normalize. Expected type to be "object", found "null".

          Schema: {
  "key": "[Todo]",
  "schema": {
    "key": "Todo",
    "schema": {}
  }
}
          Input: "null""
`;
